//
// ListItemControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import PromiseKit


open class ListItemControllerAPI {     /**
     Create Item in List
     - parameter listId: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listItemControllerCreate(listId: String, body: ListItemCreateUpdate? = nil, completion: @escaping ((_ data: ListItem?,_ error: Error?) -> Void)) {
        listItemControllerCreateWithRequestBuilder(listId: listId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    /**
     Create Item in List
     - parameter listId: (path)       - parameter body: (body)  (optional)
     - returns: Promise<ListItem>
     */
    open class func listItemControllerCreate( listId: String,  body: ListItemCreateUpdate? = nil) -> Promise<ListItem> {
        let deferred = Promise<ListItem>.pending()
        listItemControllerCreate(listId: listId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }


    /**
     Create Item in List
     - POST /v1/list/{listId}/items
     - API Key:
       - type: apiKey X-User-Token 
       - name: token
     - parameter listId: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<ListItem> 
     */
    open class func listItemControllerCreateWithRequestBuilder(listId: String, body: ListItemCreateUpdate? = nil) -> RequestBuilder<ListItem> {
        var path = "/v1/list/{listId}/items"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = GetFoodSwaggerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ListItem>.Type = GetFoodSwaggerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

    /**
     Delete Item in List
     - parameter listId: (path)       - parameter listItemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listItemControllerDelete(listId: String, listItemId: String, completion: @escaping ((_ data: ListItem?,_ error: Error?) -> Void)) {
        listItemControllerDeleteWithRequestBuilder(listId: listId, listItemId: listItemId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    /**
     Delete Item in List
     - parameter listId: (path)       - parameter listItemId: (path)  
     - returns: Promise<ListItem>
     */
    open class func listItemControllerDelete( listId: String,  listItemId: String) -> Promise<ListItem> {
        let deferred = Promise<ListItem>.pending()
        listItemControllerDelete(listId: listId, listItemId: listItemId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }


    /**
     Delete Item in List
     - DELETE /v1/list/{listId}/items/{listItemId}
     - API Key:
       - type: apiKey X-User-Token 
       - name: token
     - parameter listId: (path)       - parameter listItemId: (path)  

     - returns: RequestBuilder<ListItem> 
     */
    open class func listItemControllerDeleteWithRequestBuilder(listId: String, listItemId: String) -> RequestBuilder<ListItem> {
        var path = "/v1/list/{listId}/items/{listItemId}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let listItemIdPreEscape = "\(listItemId)"
        let listItemIdPostEscape = listItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listItemId}", with: listItemIdPostEscape, options: .literal, range: nil)
        let URLString = GetFoodSwaggerAPIAPI.basePath + path        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ListItem>.Type = GetFoodSwaggerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

    /**
     Update Item in List
     - parameter listId: (path)       - parameter listItemId: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listItemControllerUpdate(listId: String, listItemId: String, body: ListItemCreateUpdate? = nil, completion: @escaping ((_ data: ListItem?,_ error: Error?) -> Void)) {
        listItemControllerUpdateWithRequestBuilder(listId: listId, listItemId: listItemId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    /**
     Update Item in List
     - parameter listId: (path)       - parameter listItemId: (path)       - parameter body: (body)  (optional)
     - returns: Promise<ListItem>
     */
    open class func listItemControllerUpdate( listId: String,  listItemId: String,  body: ListItemCreateUpdate? = nil) -> Promise<ListItem> {
        let deferred = Promise<ListItem>.pending()
        listItemControllerUpdate(listId: listId, listItemId: listItemId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }


    /**
     Update Item in List
     - PUT /v1/list/{listId}/items/{listItemId}
     - API Key:
       - type: apiKey X-User-Token 
       - name: token
     - parameter listId: (path)       - parameter listItemId: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<ListItem> 
     */
    open class func listItemControllerUpdateWithRequestBuilder(listId: String, listItemId: String, body: ListItemCreateUpdate? = nil) -> RequestBuilder<ListItem> {
        var path = "/v1/list/{listId}/items/{listItemId}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let listItemIdPreEscape = "\(listItemId)"
        let listItemIdPostEscape = listItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listItemId}", with: listItemIdPostEscape, options: .literal, range: nil)
        let URLString = GetFoodSwaggerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ListItem>.Type = GetFoodSwaggerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

}
